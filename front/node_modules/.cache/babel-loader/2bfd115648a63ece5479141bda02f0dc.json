{"ast":null,"code":"import validador from 'validator';\n\nclass FormValidator {\n  constructor(validacao) {\n    this.validacoes = validacoes;\n  }\n\n  valida(state) {\n    const campoValor = state[this.validacoes.campo.toString()];\n    const metodoValidacao = validador[this.validacoes.metodo];\n\n    if (metodoValidacao(campoValor, [], state) === true) {\n      console.log('FORM INVALIDO');\n      return false;\n    } else {\n      console.log('FORM VALIDO');\n      return true;\n    }\n  }\n\n  valido() {\n    const validacao = {};\n    this.validacoes.map(regra => validacao[regra.campo] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validacao\n    };\n  }\n\n}\n\nexport default FormValidator;","map":{"version":3,"sources":["/Users/renatoreboucas/Projetos/react/react-alura/src/FormValidator.js"],"names":["validador","FormValidator","constructor","validacao","validacoes","valida","state","campoValor","campo","toString","metodoValidacao","metodo","console","log","valido","map","regra","isInvalid","message","isValid"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AAEA,MAAMC,aAAN,CAAmB;AAEjBC,EAAAA,WAAW,CAACC,SAAD,EAAW;AACpB,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAO;AACX,UAAMC,UAAU,GAAGD,KAAK,CAAC,KAAKF,UAAL,CAAgBI,KAAhB,CAAsBC,QAAtB,EAAD,CAAxB;AACA,UAAMC,eAAe,GAAGV,SAAS,CAAC,KAAKI,UAAL,CAAgBO,MAAjB,CAAjC;;AAEA,QAAID,eAAe,CAACH,UAAD,EAAa,EAAb,EAAiBD,KAAjB,CAAf,KAA2C,IAA/C,EAAqD;AACnDM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO,KAAP;AACD,KAHD,MAGK;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,aAAO,IAAP;AACD;AAEF;;AAEDC,EAAAA,MAAM,GAAE;AACN,UAAMX,SAAS,GAAG,EAAlB;AAEA,SAAKC,UAAL,CAAgBW,GAAhB,CAAqBC,KAAK,IACxBb,SAAS,CAACa,KAAK,CAACR,KAAP,CAAT,GAAyB;AAACS,MAAAA,SAAS,EAAE,KAAZ;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAD3B;AAIA,WAAO;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgB,SAAGhB;AAAnB,KAAP;AACD;;AA5BgB;;AAgCnB,eAAeF,aAAf","sourcesContent":["import validador from 'validator'\n\nclass FormValidator{\n\n  constructor(validacao){\n    this.validacoes = validacoes\n  }\n\n  valida(state){\n    const campoValor = state[this.validacoes.campo.toString()]\n    const metodoValidacao = validador[this.validacoes.metodo]\n\n    if( metodoValidacao(campoValor, [], state) === true ){\n      console.log('FORM INVALIDO');\n      return false\n    }else{\n      console.log('FORM VALIDO');\n      return true\n    }\n\n  }\n\n  valido(){\n    const validacao = {}\n\n    this.validacoes.map( regra => (\n      validacao[regra.campo] = {isInvalid: false, message: ''}\n    ) )\n\n    return {isValid: true, ...validacao}\n  }\n\n}\n\nexport default FormValidator"]},"metadata":{},"sourceType":"module"}