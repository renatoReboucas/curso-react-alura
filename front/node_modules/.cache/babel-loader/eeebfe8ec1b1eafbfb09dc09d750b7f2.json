{"ast":null,"code":"import validador from 'validator';\n\nclass FormValidator {\n  constructor(validacoes) {\n    this.validacoes = validacoes;\n  }\n\n  valida(state) {\n    let validacao = this.valido();\n    this.validacoes.forEach(regra => {\n      const campoValor = state[this.validacoes.campo.toString()];\n      const args = regra.args || [];\n      const metodoValidacao = typeof regra.metodo === 'string' ? validador[this.validacoes.metodo] : regra.metodo;\n\n      if (metodoValidacao(campoValor, [], state) === true) {\n        console.log('FORM INVALIDO');\n        return false;\n      } else {\n        console.log('FORM VALIDO');\n        return true;\n      }\n    });\n  }\n\n  valido() {\n    const validacao = {};\n    this.validacoes.map(regra => validacao[regra.campo] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validacao\n    };\n  }\n\n}\n\nexport default FormValidator;","map":{"version":3,"sources":["/Users/renatoreboucas/Projetos/react/react-alura/src/FormValidator.js"],"names":["validador","FormValidator","constructor","validacoes","valida","state","validacao","valido","forEach","regra","campoValor","campo","toString","args","metodoValidacao","metodo","console","log","map","isInvalid","message","isValid"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;;AAEA,MAAMC,aAAN,CAAmB;AAEjBC,EAAAA,WAAW,CAACC,UAAD,EAAY;AACrB,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAO;AACX,QAAIC,SAAS,GAAG,KAAKC,MAAL,EAAhB;AAEA,SAAKJ,UAAL,CAAgBK,OAAhB,CAAwBC,KAAK,IAAG;AAE9B,YAAMC,UAAU,GAAGL,KAAK,CAAC,KAAKF,UAAL,CAAgBQ,KAAhB,CAAsBC,QAAtB,EAAD,CAAxB;AACA,YAAMC,IAAI,GAAGJ,KAAK,CAACI,IAAN,IAAc,EAA3B;AACA,YAAMC,eAAe,GAAG,OAAOL,KAAK,CAACM,MAAb,KAAwB,QAAxB,GACxBf,SAAS,CAAC,KAAKG,UAAL,CAAgBY,MAAjB,CADe,GACYN,KAAK,CAACM,MAD1C;;AAGA,UAAID,eAAe,CAACJ,UAAD,EAAa,EAAb,EAAiBL,KAAjB,CAAf,KAA2C,IAA/C,EAAqD;AACnDW,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,eAAO,KAAP;AACD,OAHD,MAGO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,eAAO,IAAP;AACD;AAEF,KAfD;AAmBD;;AAEDV,EAAAA,MAAM,GAAE;AACN,UAAMD,SAAS,GAAG,EAAlB;AAEA,SAAKH,UAAL,CAAgBe,GAAhB,CAAqBT,KAAK,IACxBH,SAAS,CAACG,KAAK,CAACE,KAAP,CAAT,GAAyB;AAACQ,MAAAA,SAAS,EAAE,KAAZ;AAAmBC,MAAAA,OAAO,EAAE;AAA5B,KAD3B;AAIA,WAAO;AAACC,MAAAA,OAAO,EAAE,IAAV;AAAgB,SAAGf;AAAnB,KAAP;AACD;;AAtCgB;;AA0CnB,eAAeL,aAAf","sourcesContent":["import validador from 'validator'\n\nclass FormValidator{\n\n  constructor(validacoes){\n    this.validacoes = validacoes\n  }\n\n  valida(state){\n    let validacao = this.valido()\n\n    this.validacoes.forEach(regra =>{\n\n      const campoValor = state[this.validacoes.campo.toString()]\n      const args = regra.args || []\n      const metodoValidacao = typeof regra.metodo === 'string' ?\n      validador[this.validacoes.metodo] : regra.metodo\n\n      if (metodoValidacao(campoValor, [], state) === true) {\n        console.log('FORM INVALIDO');\n        return false\n      } else {\n        console.log('FORM VALIDO');\n        return true\n      } \n\n    })\n\n    \n\n  }\n\n  valido(){\n    const validacao = {}\n\n    this.validacoes.map( regra => (\n      validacao[regra.campo] = {isInvalid: false, message: ''}\n    ) )\n\n    return {isValid: true, ...validacao}\n  }\n\n}\n\nexport default FormValidator"]},"metadata":{},"sourceType":"module"}